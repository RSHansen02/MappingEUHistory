library(sf)
library(dplyr)
library(purrr)
dir.create("data")
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
eu_data <- read.csv("data/eu_data.csv")
eu_data <- eu_data %>%
mutate(
group = as.character(year),
ref_result_yes = as.numeric(ref_result_yes),
ref_result_no = as.numeric(ref_result_no),
yes_percentage = round(ref_result_yes / total_votes * 100, 2),
no_percentage = round(ref_result_no / total_votes * 100, 2)
)
View(eu_data)
create_referendum_plot <- function(country, result_yes_percentage, result_no_percentage) {
ref_results <- data.frame(
Option = factor(c("Yes", "No"), levels = c("Yes", "No")),
Percentage = c(result_yes_percentage, result_no_percentage)
)
plot <- ggplot(ref_results, aes(x = Option, y = Percentage, fill = Option)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Yes" = "green", "No" = "red")) +
scale_y_continuous(breaks = seq(0, 100, 25), labels = scales::label_percent(scale = 1, accuracy = 1)) +
labs(title = paste("Referendum Results for", country),
x = "Option", y = "Percentage") +
theme_minimal(base_family = "sans") +
theme(axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
legend.position = "none") +
geom_text(aes(label = paste0(round(Percentage, 1), "%")),
position = position_stack(vjust = 0.5),
size = 4, color = "black")
ggsave(paste0("www/", gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png"), plot,
width = 4, height = 3, dpi = 300, bg = "white")
}
eu_data %>%
filter(accession_type == "Referendum") %>%
distinct(country, .keep_all = TRUE) %>%
pmap(~ create_referendum_plot(..2, ..10, ..11))
eu_data <- read.csv("data/eu_data.csv")
eu_data <- eu_data %>%
mutate(
group = as.character(year),
ref_result_yes = as.numeric(ref_result_yes),
ref_result_no = as.numeric(ref_result_no),
yes_percentage = round(ref_result_yes / total_votes * 100, 2),
no_percentage = round(ref_result_no / total_votes * 100, 2)
)
create_referendum_plot <- function(country, result_yes_percentage, result_no_percentage) {
ref_results <- data.frame(
Option = factor(c("Yes", "No"), levels = c("Yes", "No")),
Percentage = as.numeric(c(result_yes_percentage, result_no_percentage))
)
ref_results$Label <- paste0(round(ref_results$Percentage, 1), "%")
plot <- ggplot(ref_results, aes(x = Option, y = Percentage, fill = Option)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Yes" = "green", "No" = "red")) +
scale_y_continuous(
breaks = seq(0, 100, 25),
labels = scales::label_percent(scale = 1, accuracy = 1)
) +
labs(
title = paste("Referendum Results for", country),
x = "Option", y = "Percentage"
) +
theme_minimal(base_family = "sans") +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), size = 4, color = "black")
ggsave(
paste0("referendum_plots/", gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png"),
plot,
width = 4, height = 3, dpi = 300, bg = "white"
)
}
eu_data %>%
filter(accession_type == "Referendum") %>%
distinct(country, .keep_all = TRUE) %>%
pmap(~ create_referendum_plot(..2, ..10, ..11))
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
eu_data <- read.csv("data/eu_data.csv")
eu_data <- eu_data %>%
mutate(
group = as.character(year),
ref_result_yes = as.numeric(ref_result_yes),
ref_result_no = as.numeric(ref_result_no),
yes_percentage = round(ref_result_yes / total_votes * 100, 2),
no_percentage = round(ref_result_no / total_votes * 100, 2)
)
create_referendum_plot <- function(country, result_yes_percentage, result_no_percentage) {
ref_results <- data.frame(
Option = factor(c("Yes", "No"), levels = c("Yes", "No")),
Percentage = as.numeric(c(result_yes_percentage, result_no_percentage))
)
ref_results$Label <- paste0(round(ref_results$Percentage, 1), "%")
plot <- ggplot(ref_results, aes(x = Option, y = Percentage, fill = Option)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Yes" = "green", "No" = "red")) +
scale_y_continuous(
breaks = seq(0, 100, 25),
labels = scales::label_percent(scale = 1, accuracy = 1)
) +
labs(
title = paste("Referendum Results for", country),
x = "Option", y = "Percentage"
) +
theme_minimal(base_family = "sans") +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), size = 4, color = "black")
ggsave(
paste0("www/", gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png"),
plot,
width = 4, height = 3, dpi = 300, bg = "white"
)
}
eu_data %>%
filter(accession_type == "Referendum") %>%
distinct(country, .keep_all = TRUE) %>%
pmap(~ create_referendum_plot(..2, ..10, ..11))
View(eu_data)
create_referendum_plot <- function(country, yes_percentage, no_percentage) {
ref_results <- data.frame(
Option = factor(c("Yes", "No"), levels = c("Yes", "No")),
Percentage = as.numeric(c(yes_percentage, no_percentage))
)
ref_results$Label <- paste0(round(ref_results$Percentage, 1), "%")
plot <- ggplot(ref_results, aes(x = Option, y = Percentage, fill = Option)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Yes" = "green", "No" = "red")) +
scale_y_continuous(
breaks = seq(0, 100, 25),
labels = scales::label_percent(scale = 1, accuracy = 1)
) +
labs(
title = paste("Referendum Results for", country),
x = "Option", y = "Percentage"
) +
theme_minimal(base_family = "sans") +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), size = 4, color = "black")
ggsave(
paste0("www/", gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png"),
plot,
width = 4, height = 3, dpi = 300, bg = "white"
)
}
eu_data %>%
filter(accession_type == "Referendum") %>%
distinct(country, .keep_all = TRUE) %>%
pmap(~ create_referendum_plot(..2, ..11, ..12))
create_referendum_plot <- function(country, yes_percentage, no_percentage) {
ref_results <- data.frame(
Option = factor(c("Yes", "No"), levels = c("Yes", "No")),
Percentage = as.numeric(c(yes_percentage, no_percentage))
)
ref_results$Label <- paste0(round(ref_results$Percentage, 1), "%")
plot <- ggplot(ref_results, aes(x = Option, y = Percentage, fill = Option)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Yes" = "green", "No" = "red")) +
scale_y_continuous(
breaks = seq(0, 100, 25),
labels = scales::label_percent(scale = 1, accuracy = 1)
) +
labs(
title = paste("Referendum Results for", country),
x = "Option", y = "Percentage"
) +
theme_minimal(base_family = "sans") +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), size = 4, color = "black")
ggsave(
paste0("graphics/", gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png"),
plot,
width = 4, height = 3, dpi = 300, bg = "white"
)
}
eu_data %>%
filter(accession_type == "Referendum") %>%
distinct(country, .keep_all = TRUE) %>%
pmap(~ create_referendum_plot(..2, ..11, ..12))
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
#dir.create("geo_data")
#dir.create("graphics")
eu_data <- read.csv("data/eu_data.csv")
eu_data <- eu_data %>%
mutate(
group = as.character(year),
ref_result_yes = as.numeric(ref_result_yes),
ref_result_no = as.numeric(ref_result_no),
yes_percentage = round(ref_result_yes / total_votes * 100, 2),
no_percentage = round(ref_result_no / total_votes * 100, 2)
)
View(eu_data)
create_referendum_plot <- function(country, yes_percentage, no_percentage) {
ref_results <- data.frame(
Option = factor(c("Yes", "No"), levels = c("Yes", "No")),
Percentage = as.numeric(c(yes_percentage, no_percentage))
)
ref_results$Label <- paste0(round(ref_results$Percentage, 1), "%")
plot <- ggplot(ref_results, aes(x = Option, y = Percentage, fill = Option)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Yes" = "green", "No" = "red")) +
scale_y_continuous(
breaks = seq(0, 100, 25),
labels = scales::label_percent(scale = 1, accuracy = 1)
) +
labs(
title = paste("Referendum Results for", country),
x = "Option", y = "Percentage"
) +
theme_minimal(base_family = "sans") +
theme(
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 12),
legend.position = "none"
) +
geom_text(aes(label = Label), position = position_stack(vjust = 0.5), size = 4, color = "black")
ggsave(
paste0("graphics/", gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png"),
plot,
width = 4, height = 3, dpi = 300, bg = "white"
)
}
eu_data %>%
filter(accession_type == "Referendum") %>%
distinct(country, .keep_all = TRUE) %>%
pmap(~ create_referendum_plot(..2, ..11, ..12))
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
# Update map when a year is selected
observe({
filtered_data <- eu_data %>% filter(year <= input$year_choice)  # Accumulate years
leafletProxy("eu_map", data = filtered_data) %>%
clearMarkers() %>%  # Clear previous markers
addAwesomeMarkers(
~lng, ~lat,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
"<img src='", gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png' width='200'>"
),
group = ~as.character(year)  # Group markers by year
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_data <- eu_data %>% filter(year <= input$year_choice)  # Accumulate years
leafletProxy("eu_map", data = filtered_data) %>%
clearMarkers() %>%  # Clear previous markers
addAwesomeMarkers(
~lng, ~lat,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/yourusername/yourrepo/main/referendum_graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)),"_referendum.png' width='200'>"
), ""
)
)
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_data <- eu_data %>% filter(year <= input$year_choice)  # Accumulate years
leafletProxy("eu_map", data = filtered_data) %>%
clearMarkers() %>%  # Clear previous markers
addAwesomeMarkers(
~lng, ~lat,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/tree/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)),"_referendum.png' width='200'>"
), ""
)
)
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_data <- eu_data %>% filter(year <= input$year_choice)  # Accumulate years
leafletProxy("eu_map", data = filtered_data) %>%
clearMarkers() %>%  # Clear previous markers
addAwesomeMarkers(
~lng, ~lat,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)),"_referendum.png' width='200'>"
), ""
)
)
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
View(eu_data)
iso3_codes <- unique(eu_data$country_iso)
read_country_polygon <- function(iso3) {
url <- paste0(
"https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/geo_data/gadm41_",
iso3, "_0.geojson"
)
tryCatch({
sf_obj <- st_read(url, quiet = TRUE)
sf_obj$country_iso <- iso3
sf_obj
}, error = function(e) NULL)
}
all_polygons <- map_dfr(iso3_codes, read_country_polygon)
# Merge GeoJSON polygons with EU accession data
eu_polygons <- left_join(all_polygons, eu_data, by = "country_iso")
View(all_polygons)
iso3_codes <- unique(eu_data$country_iso)
read_country_polygon <- function(iso3) {
url <- paste0(
"https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/geo_data/gadm41_",
iso3, "_0.geojson"
)
tryCatch({
sf_obj <- st_read(url, quiet = TRUE)
sf_obj$country_iso <- iso3
sf_obj
}, error = function(e) NULL)
}
all_polygons <- map_dfr(iso3_codes, read_country_polygon)
View(read_country_polygon)
View(eu_data)
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
#dir.create("geo_data")
#dir.create("graphics")
iso3_codes <- unique(eu_data$country_iso)
read_country_polygon <- function(iso3) {
url <- paste0(
"https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/geo_data/gadm41_",
iso3, "_0.geojson"
)
tryCatch({
sf_obj <- st_read(url, quiet = TRUE)
sf_obj$country_iso <- iso3
sf_obj
}, error = function(e) NULL)
}
all_polygons <- map_dfr(iso3_codes, read_country_polygon)
# Merge GeoJSON polygons with EU accession data
eu_polygons <- left_join(all_polygons, eu_data, by = "country_iso")
iso3_codes
function(iso3)
