"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/tree/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)),"_referendum.png' width='200'>"
), ""
)
)
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_data <- eu_data %>% filter(year <= input$year_choice)  # Accumulate years
leafletProxy("eu_map", data = filtered_data) %>%
clearMarkers() %>%  # Clear previous markers
addAwesomeMarkers(
~lng, ~lat,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)),"_referendum.png' width='200'>"
), ""
)
)
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
View(eu_data)
iso3_codes <- unique(eu_data$country_iso)
read_country_polygon <- function(iso3) {
url <- paste0(
"https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/geo_data/gadm41_",
iso3, "_0.geojson"
)
tryCatch({
sf_obj <- st_read(url, quiet = TRUE)
sf_obj$country_iso <- iso3
sf_obj
}, error = function(e) NULL)
}
all_polygons <- map_dfr(iso3_codes, read_country_polygon)
# Merge GeoJSON polygons with EU accession data
eu_polygons <- left_join(all_polygons, eu_data, by = "country_iso")
View(all_polygons)
iso3_codes <- unique(eu_data$country_iso)
read_country_polygon <- function(iso3) {
url <- paste0(
"https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/geo_data/gadm41_",
iso3, "_0.geojson"
)
tryCatch({
sf_obj <- st_read(url, quiet = TRUE)
sf_obj$country_iso <- iso3
sf_obj
}, error = function(e) NULL)
}
all_polygons <- map_dfr(iso3_codes, read_country_polygon)
View(read_country_polygon)
View(eu_data)
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
#dir.create("geo_data")
#dir.create("graphics")
iso3_codes <- unique(eu_data$country_iso)
read_country_polygon <- function(iso3) {
url <- paste0(
"https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/geo_data/gadm41_",
iso3, "_0.geojson"
)
tryCatch({
sf_obj <- st_read(url, quiet = TRUE)
sf_obj$country_iso <- iso3
sf_obj
}, error = function(e) NULL)
}
all_polygons <- map_dfr(iso3_codes, read_country_polygon)
# Merge GeoJSON polygons with EU accession data
eu_polygons <- left_join(all_polygons, eu_data, by = "country_iso")
iso3_codes
function(iso3)
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
#dir.create("geo_data")
#dir.create("graphics")
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_data <- eu_data %>% filter(year <= input$year_choice)  # Accumulate years
leafletProxy("eu_map", data = filtered_data) %>%
clearMarkers() %>%  # Clear previous markers
addAwesomeMarkers(
~lng, ~lat,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)),"_referendum.png' width='200'>"
), ""
)
)
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_data <- eu_data %>% filter(year <= input$year_choice)  # Accumulate years
leafletProxy("eu_map", data = filtered_data) %>%
clearMarkers() %>%  # Clear previous markers
addAwesomeMarkers(
~lng, ~lat,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)),"_referendum.png' width='300'>"
), ""
)
)
)
}
)
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
remove(all_polygons)
remove(iso3_codes)
remove(read_country_polygon)
read_country_polygon <- function(iso3) {
url <- paste0(
"https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/geo_data/gadm41_",
iso3, "_0.json"
)
message("Trying ", iso3, ": ", url)
tryCatch({
poly <- st_read(url, quiet = TRUE)
poly$country_iso <- iso3
poly
}, error = function(e) {
message("❌ Failed: ", iso3)
NULL
})
}
eu_polygons <- left_join(all_polygons, eu_data, by = "country_iso")
polygon_list <- map(iso3_codes, read_country_polygon) |> compact()
iso3_codes <- unique(eu_data$country_iso)
polygon_list <- map(iso3_codes, read_country_polygon) |> compact()
View(eu_data)
View(polygon_list)
View(eu_data)
remove(polygon_list)
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(ggplot2)
library(shiny)
library(sf)
library(dplyr)
library(purrr)
#dir.create("data")
#dir.create("geo_data")
#dir.create("graphics")
eu_data <- read.csv("data/eu_data.csv")
eu_data <- eu_data %>%
mutate(
group = as.character(year),
ref_result_yes = as.numeric(ref_result_yes),
ref_result_no = as.numeric(ref_result_no),
yes_percentage = round(ref_result_yes / total_votes * 100, 2),
no_percentage = round(ref_result_no / total_votes * 100, 2)
)
View(eu_data)
polygon_list <- map(iso3_codes, read_country_polygon) |> compact()
eu_data <- read.csv("https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/refs/heads/main/data/eu_data.csv")
eu_data <- eu_data %>%
mutate(
group = as.character(year),
ref_result_yes = as.numeric(ref_result_yes),
ref_result_no = as.numeric(ref_result_no),
yes_percentage = round(ref_result_yes / total_votes * 100, 2),
no_percentage = round(ref_result_no / total_votes * 100, 2)
)
View(eu_data)
eu_data <- read.csv("https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/refs/heads/main/data/eu_data.csv")
eu_data <- eu_data %>%
mutate(
group = as.character(year),
ref_result_yes = as.numeric(ref_result_yes),
ref_result_no = as.numeric(ref_result_no),
yes_percentage = round(ref_result_yes / total_votes * 100, 2),
no_percentage = round(ref_result_no / total_votes * 100, 2)
)
View(eu_data)
remove(polygon_list)
polygon_list <- map(iso3_codes, read_country_polygon) |> compact()
glimpse(iso3_codes)
iso3_codes
iso3_codes <- unique(eu_data$country_iso)
iso3_codes
remove(polygon_list)
polygon_list <- map(iso3_codes, read_country_polygon) |> compact()
all_polygons <- bind_rows(polygon_list)
eu_polygons <- left_join(all_polygons, eu_data, by = "country_iso")
eu_polygons
View(eu_data)
View(all_polygons)
View(eu_polygons)
View(eu_polygons)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_polygons <- eu_polygons %>% filter(year <= input$year_choice)
leafletProxy("eu_map", data = filtered_polygons) %>%
clearShapes() %>%  # Remove old polygons
addPolygons(
fillColor = "steelblue",
weight = 1,
color = "white",
fillOpacity = 0.7,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png' width='200'>"
),
""
)
)
)
})
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_polygons <- eu_polygons %>% filter(year <= input$year_choice)
leafletProxy("eu_map", data = filtered_polygons) %>%
clearShapes() %>%
addPolygons(
fillColor = "blue3",
weight = 1,
color = "white",
fillOpacity = 0.7,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png' width='200'>"
),""
)
),
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.9,
bringToFront = TRUE
)
)
})
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_polygons <- eu_polygons %>% filter(year <= input$year_choice)
leafletProxy("eu_map", data = filtered_polygons) %>%
clearShapes() %>%
addPolygons(
fillColor = "blue3",
weight = 1,
color = "white",
fillOpacity = 0.7,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png' width='200'>"
),""
)
),
highlightOptions = highlightOptions(
weight = 3,
color = "blue4",
fillOpacity = 0.9,
bringToFront = TRUE
)
)
})
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("EU Accession Timeline"),
sidebarLayout(
sidebarPanel(
radioButtons("year_choice", "Select Year:",
choices = sort(unique(eu_data$year)),
selected = min(eu_data$year))  # Default to earliest year
),
mainPanel(
leafletOutput("eu_map", height = "600px")
)
)
)
# Define Server
server <- function(input, output, session) {
# Initialize the base map
output$eu_map <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(lng = 14.146644, lat = 51.177614, zoom = 4)
})
observe({
filtered_polygons <- eu_polygons %>% filter(year <= input$year_choice)
leafletProxy("eu_map", data = filtered_polygons) %>%
clearShapes() %>%
addPolygons(
fillColor = "blue3",
weight = 1,
color = "white",
fillOpacity = 0.7,
popup = ~paste0(
"<b>", country, "</b><br>",
"Year: ", year, "<br>",
"Accession Type: ", accession_type, "<br>",
ifelse(
accession_type %in% c("Referendum", "Referendum (advisory)"),
paste0(
"<img src='https://raw.githubusercontent.com/RSHansen02/MappingEUHistory/main/graphics/",
gsub("[^A-Za-z0-9]", "_", tolower(country)), "_referendum.png' width='200'>"
),""
)
),
highlightOptions = highlightOptions(
weight = 3,
color = "blue4",
fillOpacity = 0.9,
bringToFront = TRUE
)
)
})
}
# Run the Shiny app inside RMarkdown
shinyApp(ui, server)
